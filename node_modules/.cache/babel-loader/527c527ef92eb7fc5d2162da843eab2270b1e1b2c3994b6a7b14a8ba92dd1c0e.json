{"ast":null,"code":"var _jsxFileName = \"D:\\\\Cuvette\\\\MERN\\\\Client\\\\form-builder\\\\src\\\\Components\\\\Dashboard\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./Dashboard.css\";\nimport CreateFolderModal from \"./CreateFolderModal\";\nimport CreateFormModal from \"./CreateFormModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [modalType, setModalType] = useState(null);\n  const [folders, setFolders] = useState([]);\n  const [forms, setForms] = useState([]);\n  const [activeFolderIndex, setActiveFolderIndex] = useState(null);\n  useEffect(() => {\n    // Fetch the folders and forms when the component mounts\n    fetchFolders();\n    fetchForms();\n  }, []);\n  const fetchFolders = async () => {\n    try {\n      const response = await fetch(\"/folders\", {\n        method: \"GET\",\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`\n        }\n      });\n      const data = await response.json();\n      setFolders(data);\n    } catch (err) {\n      console.error(\"Error fetching folders:\", err);\n    }\n  };\n  const fetchForms = async () => {\n    try {\n      const response = await fetch(\"/forms\", {\n        method: \"GET\",\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`\n        }\n      });\n      const data = await response.json();\n      setForms(data);\n    } catch (err) {\n      console.error(\"Error fetching forms:\", err);\n    }\n  };\n  const openModal = type => {\n    setModalType(type);\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setModalType(null);\n  };\n  const handleCreateFolder = async folderName => {\n    if (folderName.trim()) {\n      const isDuplicate = folders.some(folder => folder.name === folderName.trim());\n      if (isDuplicate) {\n        alert(\"Folder name must be unique.\");\n        return;\n      }\n      try {\n        const response = await fetch(\"/folders\", {\n          method: \"POST\",\n          headers: {\n            \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`,\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: folderName.trim()\n          })\n        });\n        const newFolder = await response.json();\n        setFolders([...folders, newFolder]);\n      } catch (err) {\n        console.error(\"Error creating folder:\", err);\n      }\n    }\n    closeModal();\n  };\n  const handleCreateForm = async (formName, folderIndex = null) => {\n    if (formName.trim()) {\n      const formData = {\n        name: formName.trim(),\n        folderId: folderIndex ? folders[folderIndex]._id : null\n      };\n      try {\n        const response = await fetch(\"/forms\", {\n          method: \"POST\",\n          headers: {\n            \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`,\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(formData)\n        });\n        const newForm = await response.json();\n        if (folderIndex !== null) {\n          const updatedFolders = [...folders];\n          updatedFolders[folderIndex].forms.push(newForm._id);\n          setFolders(updatedFolders);\n        } else {\n          setForms([...forms, newForm]);\n        }\n      } catch (err) {\n        console.error(\"Error creating form:\", err);\n      }\n    }\n    closeModal();\n  };\n\n  // New function to handle folder visibility toggle\n  const toggleFolderVisibility = index => {\n    setActiveFolderIndex(prevIndex => prevIndex === index ? null : index);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `dashboard-container`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"Create-folder-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"create-folder\",\n            onClick: () => openModal(\"folder\"),\n            children: \"Create a folder\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"create-typebot\",\n            onClick: () => openModal(\"form\"),\n            children: \"Create a typebot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"Create-form-list\",\n        children: folders.map((folder, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"folder-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: () => toggleFolderVisibility(index),\n            children: folder.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 15\n          }, this), activeFolderIndex === index && /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"form-list\",\n            children: folder.forms.map((form, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-item\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: form.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 23\n              }, this)\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), isModalOpen && modalType === \"folder\" && /*#__PURE__*/_jsxDEV(CreateFolderModal, {\n        closeModal: closeModal,\n        onCreateFolder: handleCreateFolder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this), isModalOpen && modalType === \"form\" && /*#__PURE__*/_jsxDEV(CreateFormModal, {\n        closeModal: closeModal,\n        onCreateForm: handleCreateForm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"/GngP5xupQMsn11UFnAeSeAE3yU=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","CreateFolderModal","CreateFormModal","jsxDEV","_jsxDEV","Dashboard","_s","isModalOpen","setIsModalOpen","modalType","setModalType","folders","setFolders","forms","setForms","activeFolderIndex","setActiveFolderIndex","fetchFolders","fetchForms","response","fetch","method","headers","localStorage","getItem","data","json","err","console","error","openModal","type","closeModal","handleCreateFolder","folderName","trim","isDuplicate","some","folder","name","alert","body","JSON","stringify","newFolder","handleCreateForm","formName","folderIndex","formData","folderId","_id","newForm","updatedFolders","push","toggleFolderVisibility","index","prevIndex","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","form","idx","onCreateFolder","onCreateForm","_c","$RefreshReg$"],"sources":["D:/Cuvette/MERN/Client/form-builder/src/Components/Dashboard/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./Dashboard.css\";\r\nimport CreateFolderModal from \"./CreateFolderModal\";\r\nimport CreateFormModal from \"./CreateFormModal\";\r\n\r\nconst Dashboard = () => {\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [modalType, setModalType] = useState(null);\r\n  const [folders, setFolders] = useState([]); \r\n  const [forms, setForms] = useState([]); \r\n  const [activeFolderIndex, setActiveFolderIndex] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Fetch the folders and forms when the component mounts\r\n    fetchFolders();\r\n    fetchForms();\r\n  }, []);\r\n\r\n  const fetchFolders = async () => {\r\n    try {\r\n      const response = await fetch(\"/folders\", {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`\r\n        }\r\n      });\r\n      const data = await response.json();\r\n      setFolders(data);\r\n    } catch (err) {\r\n      console.error(\"Error fetching folders:\", err);\r\n    }\r\n  };\r\n\r\n  const fetchForms = async () => {\r\n    try {\r\n      const response = await fetch(\"/forms\", {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`\r\n        }\r\n      });\r\n      const data = await response.json();\r\n      setForms(data);\r\n    } catch (err) {\r\n      console.error(\"Error fetching forms:\", err);\r\n    }\r\n  };\r\n\r\n  const openModal = (type) => {\r\n    setModalType(type);\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n    setModalType(null);\r\n  };\r\n\r\n  const handleCreateFolder = async (folderName) => {\r\n    if (folderName.trim()) {\r\n      const isDuplicate = folders.some(folder => folder.name === folderName.trim());\r\n      if (isDuplicate) {\r\n        alert(\"Folder name must be unique.\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await fetch(\"/folders\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`,\r\n            \"Content-Type\": \"application/json\"\r\n          },\r\n          body: JSON.stringify({ name: folderName.trim() })\r\n        });\r\n        const newFolder = await response.json();\r\n        setFolders([...folders, newFolder]);\r\n      } catch (err) {\r\n        console.error(\"Error creating folder:\", err);\r\n      }\r\n    }\r\n    closeModal();\r\n  };\r\n\r\n  const handleCreateForm = async (formName, folderIndex = null) => {\r\n    if (formName.trim()) {\r\n      const formData = { name: formName.trim(), folderId: folderIndex ? folders[folderIndex]._id : null };\r\n\r\n      try {\r\n        const response = await fetch(\"/forms\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`,\r\n            \"Content-Type\": \"application/json\"\r\n          },\r\n          body: JSON.stringify(formData)\r\n        });\r\n        const newForm = await response.json();\r\n\r\n        if (folderIndex !== null) {\r\n          const updatedFolders = [...folders];\r\n          updatedFolders[folderIndex].forms.push(newForm._id);\r\n          setFolders(updatedFolders);\r\n        } else {\r\n          setForms([...forms, newForm]);\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error creating form:\", err);\r\n      }\r\n    }\r\n    closeModal();\r\n  };\r\n\r\n  // New function to handle folder visibility toggle\r\n  const toggleFolderVisibility = (index) => {\r\n    setActiveFolderIndex(prevIndex => (prevIndex === index ? null : index));\r\n  };\r\n\r\n  return (\r\n    <div className={`dashboard-container`}>\r\n      <div className=\"Dashboard-content\">\r\n        <ul className=\"Create-folder-list\">\r\n          <li>\r\n            <button className=\"create-folder\" onClick={() => openModal(\"folder\")}>\r\n              Create a folder\r\n            </button>\r\n          </li>\r\n          <li>\r\n            <button className=\"create-typebot\" onClick={() => openModal(\"form\")}>\r\n              Create a typebot\r\n            </button>\r\n          </li>\r\n        </ul>\r\n\r\n        <ul className=\"Create-form-list\">\r\n          {folders.map((folder, index) => (\r\n            <div key={index} className=\"folder-item\">\r\n              <span onClick={() => toggleFolderVisibility(index)}>{folder.name}</span>\r\n              {activeFolderIndex === index && (\r\n                <ul className=\"form-list\">\r\n                  {folder.forms.map((form, idx) => (\r\n                    <div key={idx} className=\"form-item\">\r\n                      <span>{form.name}</span>\r\n                    </div>\r\n                  ))}\r\n                </ul>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </ul>\r\n\r\n        {isModalOpen && modalType === \"folder\" && (\r\n          <CreateFolderModal closeModal={closeModal} onCreateFolder={handleCreateFolder} />\r\n        )}\r\n        {isModalOpen && modalType === \"form\" && (\r\n          <CreateFormModal closeModal={closeModal} onCreateForm={handleCreateForm} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}