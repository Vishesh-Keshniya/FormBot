{"ast":null,"code":"var _jsxFileName = \"D:\\\\Cuvette\\\\Final evaluation\\\\form-builder\\\\src\\\\Components\\\\Dashboard\\\\Dashboard.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CreateFormModal from './CreateFormModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [folders, setFolders] = useState([]);\n  const [selectedFolderIndex, setSelectedFolderIndex] = useState(null); // Track selected folder\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [modalType, setModalType] = useState(null);\n  const openModal = type => {\n    setModalType(type);\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setModalType(null);\n  };\n  const handleCreateFolder = folderName => {\n    if (folderName.trim()) {\n      setFolders([...folders, {\n        name: folderName.trim(),\n        forms: []\n      }]);\n    }\n    closeModal();\n  };\n  const handleCreateForm = (formName, folderIndex) => {\n    if (folderIndex === null || folderIndex === undefined) {\n      console.error(\"No folder selected!\");\n      return; // Handle the case where no folder is selected\n    }\n    const updatedFolders = [...folders];\n\n    // Ensure the folder exists and has a 'forms' property\n    if (updatedFolders[folderIndex] && Array.isArray(updatedFolders[folderIndex].forms)) {\n      updatedFolders[folderIndex].forms.push(formName.trim());\n      setFolders(updatedFolders);\n    } else {\n      console.error(\"Forms array is missing or folder does not exist!\");\n    }\n    closeModal();\n  };\n  const handleFolderClick = index => {\n    setSelectedFolderIndex(index); // Update selected folder\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"navbar\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => openModal(\"folder\"),\n        children: \"Create Folder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Dashboard-content\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"folder-list\",\n        children: folders.map((folder, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"folder-item\",\n          onClick: () => handleFolderClick(index) // Handle folder click\n          ,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: folder.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => openModal(\"form\"),\n            disabled: selectedFolderIndex === null,\n            children: \"Create Form\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), isModalOpen && modalType === \"form\" && /*#__PURE__*/_jsxDEV(CreateFormModal, {\n      closeModal: closeModal,\n      folderIndex: selectedFolderIndex // Pass selected folder index to form modal\n      ,\n      onCreateForm: handleCreateForm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this), isModalOpen && modalType === \"folder\" && /*#__PURE__*/_jsxDEV(CreateFolderModal, {\n      closeModal: closeModal,\n      onCreateFolder: handleCreateFolder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n// Modal to create a new folder\n_s(Dashboard, \"fr216pQhqvuRtWeyiXrAAV/ND+k=\");\n_c = Dashboard;\nconst CreateFolderModal = ({\n  closeModal,\n  onCreateFolder\n}) => {\n  _s2();\n  const [folderName, setFolderName] = useState(\"\");\n  const handleFolderSubmit = () => {\n    if (folderName.trim()) {\n      onCreateFolder(folderName);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: folderName,\n      onChange: e => setFolderName(e.target.value),\n      placeholder: \"Enter folder name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFolderSubmit,\n      children: \"Create Folder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: closeModal,\n      children: \"Close\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s2(CreateFolderModal, \"alRrfKll5azFKw4bC5iXBLTELHI=\");\n_c2 = CreateFolderModal;\nexport default Dashboard;\nvar _c, _c2;\n$RefreshReg$(_c, \"Dashboard\");\n$RefreshReg$(_c2, \"CreateFolderModal\");","map":{"version":3,"names":["React","useState","CreateFormModal","jsxDEV","_jsxDEV","Dashboard","_s","folders","setFolders","selectedFolderIndex","setSelectedFolderIndex","isModalOpen","setIsModalOpen","modalType","setModalType","openModal","type","closeModal","handleCreateFolder","folderName","trim","name","forms","handleCreateForm","formName","folderIndex","undefined","console","error","updatedFolders","Array","isArray","push","handleFolderClick","index","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","folder","disabled","onCreateForm","CreateFolderModal","onCreateFolder","_c","_s2","setFolderName","handleFolderSubmit","value","onChange","e","target","placeholder","_c2","$RefreshReg$"],"sources":["D:/Cuvette/Final evaluation/form-builder/src/Components/Dashboard/Dashboard.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport CreateFormModal from './CreateFormModal';\r\n\r\nconst Dashboard = () => {\r\n  const [folders, setFolders] = useState([]);\r\n  const [selectedFolderIndex, setSelectedFolderIndex] = useState(null); // Track selected folder\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [modalType, setModalType] = useState(null);\r\n\r\n  const openModal = (type) => {\r\n    setModalType(type);\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n    setModalType(null);\r\n  };\r\n\r\n  const handleCreateFolder = (folderName) => {\r\n    if (folderName.trim()) {\r\n      setFolders([...folders, { name: folderName.trim(), forms: [] }]);\r\n    }\r\n    closeModal();\r\n  };\r\n\r\n  const handleCreateForm = (formName, folderIndex) => {\r\n    if (folderIndex === null || folderIndex === undefined) {\r\n      console.error(\"No folder selected!\");\r\n      return; // Handle the case where no folder is selected\r\n    }\r\n\r\n    const updatedFolders = [...folders];\r\n\r\n    // Ensure the folder exists and has a 'forms' property\r\n    if (updatedFolders[folderIndex] && Array.isArray(updatedFolders[folderIndex].forms)) {\r\n      updatedFolders[folderIndex].forms.push(formName.trim());\r\n      setFolders(updatedFolders);\r\n    } else {\r\n      console.error(\"Forms array is missing or folder does not exist!\");\r\n    }\r\n\r\n    closeModal();\r\n  };\r\n\r\n  const handleFolderClick = (index) => {\r\n    setSelectedFolderIndex(index); // Update selected folder\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      <nav className=\"navbar\">\r\n        <button onClick={() => openModal(\"folder\")}>Create Folder</button>\r\n      </nav>\r\n\r\n      <div className=\"Dashboard-content\">\r\n        <ul className=\"folder-list\">\r\n          {folders.map((folder, index) => (\r\n            <div\r\n              key={index}\r\n              className=\"folder-item\"\r\n              onClick={() => handleFolderClick(index)} // Handle folder click\r\n            >\r\n              <span>{folder.name}</span>\r\n              <button onClick={() => openModal(\"form\")} disabled={selectedFolderIndex === null}>\r\n                Create Form\r\n              </button>\r\n            </div>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n\r\n      {isModalOpen && modalType === \"form\" && (\r\n        <CreateFormModal\r\n          closeModal={closeModal}\r\n          folderIndex={selectedFolderIndex} // Pass selected folder index to form modal\r\n          onCreateForm={handleCreateForm}\r\n        />\r\n      )}\r\n\r\n      {isModalOpen && modalType === \"folder\" && (\r\n        <CreateFolderModal closeModal={closeModal} onCreateFolder={handleCreateFolder} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Modal to create a new folder\r\nconst CreateFolderModal = ({ closeModal, onCreateFolder }) => {\r\n  const [folderName, setFolderName] = useState(\"\");\r\n\r\n  const handleFolderSubmit = () => {\r\n    if (folderName.trim()) {\r\n      onCreateFolder(folderName);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"modal\">\r\n      <input\r\n        type=\"text\"\r\n        value={folderName}\r\n        onChange={(e) => setFolderName(e.target.value)}\r\n        placeholder=\"Enter folder name\"\r\n      />\r\n      <button onClick={handleFolderSubmit}>Create Folder</button>\r\n      <button onClick={closeModal}>Close</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}