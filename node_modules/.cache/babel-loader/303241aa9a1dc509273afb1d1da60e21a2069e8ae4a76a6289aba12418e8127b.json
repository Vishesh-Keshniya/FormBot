{"ast":null,"code":"var _jsxFileName = \"D:\\\\Cuvette\\\\MERN\\\\Client\\\\form-builder\\\\src\\\\Components\\\\Dashboard\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Dashboard.css\";\nimport CreateFolderModal from \"./CreateFolderModal\";\nimport CreateFormModal from \"./CreateFormModal\";\nimport DeleteFolder from \"./DeleteFolder\";\nimport DeleteForm from \"./DeleteForm\";\nimport Settings from \"./Settings\";\nimport ShareModal from \"./ShareModal\";\n\n// FolderItem and GlobalForms components (the new ones)\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FolderItem = ({\n  folder,\n  index,\n  activeFolderIndex,\n  toggleFolderVisibility,\n  openDeleteFolderModal,\n  openDeleteFormModal\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"folder-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      onClick: () => toggleFolderVisibility(index),\n      children: folder.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"delete-button\",\n      onClick: () => openDeleteFolderModal(index),\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"del.png\",\n        alt: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), activeFolderIndex === index && /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"form-list\",\n      children: folder.forms.map((form, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: form\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"delete-button-form\",\n          onClick: () => openDeleteFormModal(idx),\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"del.png\",\n            className: \"del-form\",\n            alt: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 15\n        }, this)]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n_c = FolderItem;\nconst GlobalForms = ({\n  forms,\n  openDeleteFormModal\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"form-list\",\n    children: forms.map((form, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: form\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"delete-button-form\",\n        onClick: () => openDeleteFormModal(index),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"del.png\",\n          className: \"del-form\",\n          alt: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_c2 = GlobalForms;\nconst Dashboard = () => {\n  _s();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [modalType, setModalType] = useState(null);\n  const [isLightTheme, setIsLightTheme] = useState(false);\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [folders, setFolders] = useState([]);\n  const [forms, setForms] = useState([]); // Global forms\n  const [deleteFolderIndex, setDeleteFolderIndex] = useState(null);\n  const [deleteFormIndex, setDeleteFormIndex] = useState(null);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isDeleteFormModalOpen, setIsDeleteFormModalOpen] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [isShareModalOpen, setIsShareModalOpen] = useState(false);\n  const [activeFolderIndex, setActiveFolderIndex] = useState(null); // State for active folder\n\n  const openModal = type => {\n    setModalType(type);\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setModalType(null);\n  };\n  const handleCreateFolder = folderName => {\n    if (folderName.trim()) {\n      const isDuplicate = folders.some(folder => folder.name === folderName.trim());\n      if (isDuplicate) {\n        alert(\"Folder name must be unique.\");\n        return;\n      }\n      setFolders([...folders, {\n        name: folderName.trim(),\n        forms: []\n      }]);\n    }\n    closeModal();\n  };\n  const handleCreateForm = (formName, folderIndex = null) => {\n    if (formName.trim()) {\n      if (folderIndex !== null) {\n        const updatedFolders = [...folders];\n        updatedFolders[folderIndex].forms.push(formName.trim());\n        setFolders(updatedFolders);\n      } else {\n        setForms([...forms, formName.trim()]);\n      }\n    }\n    closeModal();\n  };\n  const toggleTheme = () => {\n    setIsLightTheme(prevState => !prevState);\n  };\n  const toggleDropdown = () => {\n    setIsDropdownOpen(prevState => !prevState);\n  };\n  const handleDeleteFolder = index => {\n    const updatedFolders = folders.filter((_, i) => i !== index);\n    setFolders(updatedFolders);\n  };\n  const handleDeleteForm = index => {\n    const updatedForms = forms.filter((_, i) => i !== index);\n    setForms(updatedForms);\n  };\n  const openDeleteFolderModal = index => {\n    setDeleteFolderIndex(index);\n    setIsDeleteModalOpen(true);\n  };\n  const openDeleteFormModal = index => {\n    setDeleteFormIndex(index);\n    setIsDeleteFormModalOpen(true);\n  };\n  const closeDeleteFolderModal = () => {\n    setDeleteFolderIndex(null);\n    setIsDeleteModalOpen(false);\n  };\n  const closeDeleteFormModal = () => {\n    setDeleteFormIndex(null);\n    setIsDeleteFormModalOpen(false);\n  };\n  const confirmDeleteFolder = () => {\n    if (deleteFolderIndex !== null) {\n      handleDeleteFolder(deleteFolderIndex);\n    }\n    closeDeleteFolderModal();\n  };\n  const confirmDeleteForm = () => {\n    if (deleteFormIndex !== null) {\n      handleDeleteForm(deleteFormIndex);\n    }\n    closeDeleteFormModal();\n  };\n  const openSettings = () => {\n    setIsSettingsOpen(true);\n  };\n  const closeSettings = () => {\n    setIsSettingsOpen(false);\n  };\n  const openShareModal = () => {\n    setIsShareModalOpen(true);\n  };\n  const closeShareModal = () => {\n    setIsShareModalOpen(false);\n  };\n\n  // Toggle the active folder index\n  const toggleFolderVisibility = index => {\n    setActiveFolderIndex(activeFolderIndex === index ? null : index);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `dashboard-container ${isLightTheme ? \"light\" : \"dark\"}`,\n    children: [isSettingsOpen ? /*#__PURE__*/_jsxDEV(Settings, {\n      closeSettings: closeSettings\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        className: \"navbar\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"workspace-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"workspace-button\",\n            onClick: toggleDropdown,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Dewank Rastogi's workspace\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"dropdown-icon\",\n              src: \"drop.png\",\n              alt: \"Dropdown Icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 15\n          }, this), isDropdownOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dropdown-menu\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"dropdown-item\",\n              onClick: openSettings,\n              children: \"Settings\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"dropdown-item logout\",\n              children: \"Log Out\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"theme-toggle\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Light\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"switch\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: !isLightTheme,\n              onChange: toggleTheme\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"slider\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Dark\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"share-button\",\n          onClick: openShareModal,\n          children: \"Share\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Dashboard-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => openModal(\"folder\"),\n          children: \"Create Folder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => openModal(\"form\"),\n          children: \"Create Form\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"folders-list\",\n          children: folders.map((folder, index) => /*#__PURE__*/_jsxDEV(FolderItem, {\n            folder: folder,\n            index: index,\n            activeFolderIndex: activeFolderIndex,\n            toggleFolderVisibility: toggleFolderVisibility,\n            openDeleteFolderModal: openDeleteFolderModal,\n            openDeleteFormModal: openDeleteFormModal\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this), activeFolderIndex === null && /*#__PURE__*/_jsxDEV(GlobalForms, {\n          forms: forms,\n          openDeleteFormModal: openDeleteFormModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(CreateFolderModal, {\n      isOpen: isModalOpen && modalType === \"folder\",\n      onClose: closeModal,\n      onCreate: handleCreateFolder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CreateFormModal, {\n      isOpen: isModalOpen && modalType === \"form\",\n      onClose: closeModal,\n      onCreate: handleCreateForm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DeleteFolder, {\n      isOpen: isDeleteModalOpen,\n      onClose: closeDeleteFolderModal,\n      onDelete: confirmDeleteFolder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DeleteForm, {\n      isOpen: isDeleteFormModalOpen,\n      onClose: closeDeleteFormModal,\n      onDelete: confirmDeleteForm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ShareModal, {\n      isOpen: isShareModalOpen,\n      onClose: closeShareModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"lscDBnJ8kPMPBqMbQyxbGtiS00E=\");\n_c3 = Dashboard;\nexport default Dashboard;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"FolderItem\");\n$RefreshReg$(_c2, \"GlobalForms\");\n$RefreshReg$(_c3, \"Dashboard\");","map":{"version":3,"names":["React","useState","CreateFolderModal","CreateFormModal","DeleteFolder","DeleteForm","Settings","ShareModal","jsxDEV","_jsxDEV","Fragment","_Fragment","FolderItem","folder","index","activeFolderIndex","toggleFolderVisibility","openDeleteFolderModal","openDeleteFormModal","className","children","onClick","name","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","forms","map","form","idx","_c","GlobalForms","_c2","Dashboard","_s","isModalOpen","setIsModalOpen","modalType","setModalType","isLightTheme","setIsLightTheme","isDropdownOpen","setIsDropdownOpen","folders","setFolders","setForms","deleteFolderIndex","setDeleteFolderIndex","deleteFormIndex","setDeleteFormIndex","isDeleteModalOpen","setIsDeleteModalOpen","isDeleteFormModalOpen","setIsDeleteFormModalOpen","isSettingsOpen","setIsSettingsOpen","isShareModalOpen","setIsShareModalOpen","setActiveFolderIndex","openModal","type","closeModal","handleCreateFolder","folderName","trim","isDuplicate","some","alert","handleCreateForm","formName","folderIndex","updatedFolders","push","toggleTheme","prevState","toggleDropdown","handleDeleteFolder","filter","_","i","handleDeleteForm","updatedForms","closeDeleteFolderModal","closeDeleteFormModal","confirmDeleteFolder","confirmDeleteForm","openSettings","closeSettings","openShareModal","closeShareModal","checked","onChange","isOpen","onClose","onCreate","onDelete","_c3","$RefreshReg$"],"sources":["D:/Cuvette/MERN/Client/form-builder/src/Components/Dashboard/Dashboard.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Dashboard.css\";\r\nimport CreateFolderModal from \"./CreateFolderModal\";\r\nimport CreateFormModal from \"./CreateFormModal\";\r\nimport DeleteFolder from \"./DeleteFolder\";\r\nimport DeleteForm from \"./DeleteForm\";\r\nimport Settings from \"./Settings\";\r\nimport ShareModal from \"./ShareModal\";\r\n\r\n// FolderItem and GlobalForms components (the new ones)\r\nconst FolderItem = ({ folder, index, activeFolderIndex, toggleFolderVisibility, openDeleteFolderModal, openDeleteFormModal }) => {\r\n  return (\r\n    <div className=\"folder-item\">\r\n      <span onClick={() => toggleFolderVisibility(index)}>{folder.name}</span>\r\n      <button\r\n        className=\"delete-button\"\r\n        onClick={() => openDeleteFolderModal(index)}\r\n      >\r\n        <img src=\"del.png\" alt=\"Delete\" />\r\n      </button>\r\n      {/* Show form list only for the active folder */}\r\n      {activeFolderIndex === index && (\r\n        <ul className=\"form-list\">\r\n          {folder.forms.map((form, idx) => (\r\n            <div key={idx} className=\"form-item\">\r\n              <span>{form}</span>\r\n              <button\r\n                className=\"delete-button-form\"\r\n                onClick={() => openDeleteFormModal(idx)}\r\n              >\r\n                <img src=\"del.png\" className=\"del-form\" alt=\"Delete\" />\r\n              </button>\r\n            </div>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst GlobalForms = ({ forms, openDeleteFormModal }) => {\r\n  return (\r\n    <ul className=\"form-list\">\r\n      {forms.map((form, index) => (\r\n        <div key={index} className=\"form-item\">\r\n          <span>{form}</span>\r\n          <button\r\n            className=\"delete-button-form\"\r\n            onClick={() => openDeleteFormModal(index)}\r\n          >\r\n            <img src=\"del.png\" className=\"del-form\" alt=\"Delete\" />\r\n          </button>\r\n        </div>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nconst Dashboard = () => {\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [modalType, setModalType] = useState(null);\r\n  const [isLightTheme, setIsLightTheme] = useState(false);\r\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n  const [folders, setFolders] = useState([]);\r\n  const [forms, setForms] = useState([]); // Global forms\r\n  const [deleteFolderIndex, setDeleteFolderIndex] = useState(null);\r\n  const [deleteFormIndex, setDeleteFormIndex] = useState(null);\r\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\r\n  const [isDeleteFormModalOpen, setIsDeleteFormModalOpen] = useState(false);\r\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\r\n  const [isShareModalOpen, setIsShareModalOpen] = useState(false);\r\n  const [activeFolderIndex, setActiveFolderIndex] = useState(null); // State for active folder\r\n\r\n  const openModal = (type) => {\r\n    setModalType(type);\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n    setModalType(null);\r\n  };\r\n\r\n  const handleCreateFolder = (folderName) => {\r\n    if (folderName.trim()) {\r\n      const isDuplicate = folders.some(folder => folder.name === folderName.trim());\r\n      if (isDuplicate) {\r\n        alert(\"Folder name must be unique.\");\r\n        return;\r\n      }\r\n      setFolders([...folders, { name: folderName.trim(), forms: [] }]);\r\n    }\r\n    closeModal();\r\n  };\r\n\r\n  const handleCreateForm = (formName, folderIndex = null) => {\r\n    if (formName.trim()) {\r\n      if (folderIndex !== null) {\r\n        const updatedFolders = [...folders];\r\n        updatedFolders[folderIndex].forms.push(formName.trim());\r\n        setFolders(updatedFolders);\r\n      } else {\r\n        setForms([...forms, formName.trim()]);\r\n      }\r\n    }\r\n    closeModal();\r\n  };\r\n\r\n  const toggleTheme = () => {\r\n    setIsLightTheme((prevState) => !prevState);\r\n  };\r\n\r\n  const toggleDropdown = () => {\r\n    setIsDropdownOpen((prevState) => !prevState);\r\n  };\r\n\r\n  const handleDeleteFolder = (index) => {\r\n    const updatedFolders = folders.filter((_, i) => i !== index);\r\n    setFolders(updatedFolders);\r\n  };\r\n\r\n  const handleDeleteForm = (index) => {\r\n    const updatedForms = forms.filter((_, i) => i !== index);\r\n    setForms(updatedForms);\r\n  };\r\n\r\n  const openDeleteFolderModal = (index) => {\r\n    setDeleteFolderIndex(index);\r\n    setIsDeleteModalOpen(true);\r\n  };\r\n\r\n  const openDeleteFormModal = (index) => {\r\n    setDeleteFormIndex(index);\r\n    setIsDeleteFormModalOpen(true);\r\n  };\r\n\r\n  const closeDeleteFolderModal = () => {\r\n    setDeleteFolderIndex(null);\r\n    setIsDeleteModalOpen(false);\r\n  };\r\n\r\n  const closeDeleteFormModal = () => {\r\n    setDeleteFormIndex(null);\r\n    setIsDeleteFormModalOpen(false);\r\n  };\r\n\r\n  const confirmDeleteFolder = () => {\r\n    if (deleteFolderIndex !== null) {\r\n      handleDeleteFolder(deleteFolderIndex);\r\n    }\r\n    closeDeleteFolderModal();\r\n  };\r\n\r\n  const confirmDeleteForm = () => {\r\n    if (deleteFormIndex !== null) {\r\n      handleDeleteForm(deleteFormIndex);\r\n    }\r\n    closeDeleteFormModal();\r\n  };\r\n\r\n  const openSettings = () => {\r\n    setIsSettingsOpen(true);\r\n  };\r\n\r\n  const closeSettings = () => {\r\n    setIsSettingsOpen(false);\r\n  };\r\n\r\n  const openShareModal = () => {\r\n    setIsShareModalOpen(true);\r\n  };\r\n\r\n  const closeShareModal = () => {\r\n    setIsShareModalOpen(false);\r\n  };\r\n\r\n  // Toggle the active folder index\r\n  const toggleFolderVisibility = (index) => {\r\n    setActiveFolderIndex(activeFolderIndex === index ? null : index);\r\n  };\r\n\r\n  return (\r\n    <div className={`dashboard-container ${isLightTheme ? \"light\" : \"dark\"}`}>\r\n      {isSettingsOpen ? (\r\n        <Settings closeSettings={closeSettings} />\r\n      ) : (\r\n        <>\r\n          <nav className=\"navbar\">\r\n            <div className=\"logo\"></div>\r\n            <div className=\"workspace-container\">\r\n              <button className=\"workspace-button\" onClick={toggleDropdown}>\r\n                <span>Dewank Rastogi's workspace</span>\r\n                <img className=\"dropdown-icon\" src=\"drop.png\" alt=\"Dropdown Icon\" />\r\n              </button>\r\n              {isDropdownOpen && (\r\n                <div className=\"dropdown-menu\">\r\n                  <button className=\"dropdown-item\" onClick={openSettings}>Settings</button>\r\n                  <button className=\"dropdown-item logout\">Log Out</button>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"theme-toggle\">\r\n              <span>Light</span>\r\n              <label className=\"switch\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={!isLightTheme}\r\n                  onChange={toggleTheme}\r\n                />\r\n                <span className=\"slider\"></span>\r\n              </label>\r\n              <span>Dark</span>\r\n            </div>\r\n            <button className=\"share-button\" onClick={openShareModal}>\r\n              Share\r\n            </button>\r\n          </nav>\r\n\r\n          <div className=\"Dashboard-content\">\r\n            {/* Create Folder Section */}\r\n            <button onClick={() => openModal(\"folder\")}>Create Folder</button>\r\n            <button onClick={() => openModal(\"form\")}>Create Form</button>\r\n\r\n            <div className=\"folders-list\">\r\n              {folders.map((folder, index) => (\r\n                <FolderItem\r\n                  key={index}\r\n                  folder={folder}\r\n                  index={index}\r\n                  activeFolderIndex={activeFolderIndex}\r\n                  toggleFolderVisibility={toggleFolderVisibility}\r\n                  openDeleteFolderModal={openDeleteFolderModal}\r\n                  openDeleteFormModal={openDeleteFormModal}\r\n                />\r\n              ))}\r\n            </div>\r\n\r\n            {/* Display global forms if no folder is selected */}\r\n            {activeFolderIndex === null && (\r\n              <GlobalForms forms={forms} openDeleteFormModal={openDeleteFormModal} />\r\n            )}\r\n          </div>\r\n        </>\r\n      )}\r\n\r\n      {/* Modals for create and delete */}\r\n      <CreateFolderModal\r\n        isOpen={isModalOpen && modalType === \"folder\"}\r\n        onClose={closeModal}\r\n        onCreate={handleCreateFolder}\r\n      />\r\n      <CreateFormModal\r\n        isOpen={isModalOpen && modalType === \"form\"}\r\n        onClose={closeModal}\r\n        onCreate={handleCreateForm}\r\n      />\r\n      <DeleteFolder\r\n        isOpen={isDeleteModalOpen}\r\n        onClose={closeDeleteFolderModal}\r\n        onDelete={confirmDeleteFolder}\r\n      />\r\n      <DeleteForm\r\n        isOpen={isDeleteFormModalOpen}\r\n        onClose={closeDeleteFormModal}\r\n        onDelete={confirmDeleteForm}\r\n      />\r\n      <ShareModal isOpen={isShareModalOpen} onClose={closeShareModal} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}